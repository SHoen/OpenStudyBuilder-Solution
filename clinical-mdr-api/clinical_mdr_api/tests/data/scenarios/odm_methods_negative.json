[
    {
        "name": "Create a new odm method",
        "request": {
            "headers": {},
            "method": "POST",
            "request": {
                "libraryName": "Sponsor",
                "name": "name1",
                "oid": "oid1",
                "type": "type1",
                "formalExpressionUids": [
                    "odm_formal_expression1"
                ],
                "descriptionUids": [
                    "odm_description1",
                    "odm_description2"
                ],
                "aliasUids": [
                    "odm_alias1"
                ]
            },
            "url": "concepts/odms/methods/select"
        },
        "response": {
            "code": 201,
            "headers": {
                "content-length": "459",
                "content-type": "application/json"
            },
            "result": {
                "uid": "OdmMethod_000001",
                "name": "name1",
                "libraryName": "Sponsor",
                "oid": "oid1",
                "type": "type1",
                "startDate": "2022-03-03T11:17:56.799074",
                "endDate": null,
                "status": "Draft",
                "version": "0.1",
                "changeDescription": "Initial version",
                "userInitials": "TODO user initials",
                "formalExpressions": [
                    {
                        "uid": "odm_formal_expression1",
                        "context": "context1",
                        "expression": "expression1",
                        "version": "0.1"
                    }
                ],
                "descriptions": [
                    {
                        "uid": "odm_description1",
                        "name": "name1",
                        "language": "ENG",
                        "description": "description1",
                        "instruction": "instruction1",
                        "sponsorInstruction": "sponsorInstruction1",
                        "version": "0.1"
                    },
                    {
                        "uid": "odm_description2",
                        "name": "name2",
                        "language": "language2",
                        "description": "description2",
                        "instruction": "instruction2",
                        "sponsorInstruction": "sponsorInstruction2",
                        "version": "0.1"
                    }
                ],
                "aliases": [
                    {
                        "uid": "odm_alias1",
                        "context": "context1",
                        "name": "name1",
                        "version": "0.1"
                    }
                ],
                "possibleActions": [
                    "approve",
                    "delete",
                    "edit"
                ]
            }
        }
    },
    {
        "name": "Test cannot create a new odm method with odm formal expressions with same context",
        "request": {
            "headers": {},
            "method": "POST",
            "request": {
                "libraryName": "Sponsor",
                "name": "a name",
                "oid": "aoid",
                "type": "atype",
                "formalExpressionUids": [
                    "odm_formal_expression1",
                    "odm_formal_expression3"
                ],
                "descriptionUids": [
                    "odm_description1"
                ],
                "aliasUids": []
            },
            "url": "concepts/odms/methods/select"
        },
        "response": {
            "code": 400,
            "headers": {
                "content-length": "459",
                "content-type": "application/json"
            },
            "result": {
                "message": "OdmMethod tried to connect to OdmFormalExpressions with same context (context1).",
                "time": "2022-03-07T12: 14: 18.116363",
                "path": "http://testserver/concepts/odms/methods/select",
                "method": "POST",
                "type": "BusinessLogicException"
            }
        }
    },
    {
        "name": "Test cannot update an odm method with odm formal expressions with same context",
        "request": {
            "headers": {},
            "method": "PATCH",
            "request": {
                "changeDescription": "formal expressions changed",
                "name": "name1",
                "oid": "oid1",
                "type": "type1",
                "formalExpressionUids": [
                    "odm_formal_expression3"
                ],
                "descriptionUids": [
                    "odm_description1"
                ],
                "aliasUids": []
            },
            "url": "concepts/odms/methods/OdmMethod_000001/select"
        },
        "response": {
            "code": 400,
            "headers": {
                "content-length": "459",
                "content-type": "application/json"
            },
            "result": {
                "message": "OdmMethod tried to connect to OdmFormalExpressions with same context (context1).",
                "time": "2022-03-07T12: 14: 18.116363",
                "path": "http://testserver/concepts/odms/methods/OdmMethod_000001/select",
                "method": "PATCH",
                "type": "BusinessLogicException"
            }
        }
    },
    {
        "name": "Test cannot create a new odm method with existing name",
        "request": {
            "headers": {},
            "method": "POST",
            "request": {
                "libraryName": "Sponsor",
                "name": "name1",
                "oid": "oid2",
                "type": "type1",
                "formalExpressionUids": [],
                "descriptionUids": [
                    "odm_description1"
                ],
                "aliasUids": []
            },
            "url": "concepts/odms/methods/select"
        },
        "response": {
            "code": 400,
            "headers": {
                "content-length": "459",
                "content-type": "application/json"
            },
            "result": {
                "message": "OdmMethod with name (name1) already exists.",
                "time": "2022-03-07T12: 14: 18.116363",
                "path": "http://testserver/concepts/odms/methods/select",
                "method": "POST",
                "type": "BusinessLogicException"
            }
        }
    },
    {
        "name": "Test cannot create a new odm method with existing oid",
        "request": {
            "headers": {},
            "method": "POST",
            "request": {
                "libraryName": "Sponsor",
                "name": "name2",
                "oid": "oid1",
                "type": "type1",
                "formalExpressionUids": [],
                "descriptionUids": [
                    "odm_description1"
                ],
                "aliasUids": []
            },
            "url": "concepts/odms/methods/select"
        },
        "response": {
            "code": 400,
            "headers": {
                "content-length": "459",
                "content-type": "application/json"
            },
            "result": {
                "message": "OdmMethod with OID (oid1) already exists.",
                "time": "2022-03-07T12: 14: 18.116363",
                "path": "http://testserver/concepts/odms/methods/select",
                "method": "POST",
                "type": "BusinessLogicException"
            }
        }
    },
    {
        "name": "Test cannot create a new odm method without an English description",
        "request": {
            "headers": {},
            "method": "POST",
            "request": {
                "libraryName": "Sponsor",
                "name": "name2",
                "oid": "oid2",
                "type": "type2",
                "formalExpressionUids": [],
                "descriptionUids": [
                    "odm_description2"
                ],
                "aliasUids": []
            },
            "url": "concepts/odms/methods/select"
        },
        "response": {
            "code": 400,
            "headers": {
                "content-length": "459",
                "content-type": "application/json"
            },
            "result": {
                "message": "An English OdmDescription must be provided.",
                "time": "2022-03-07T12: 14: 18.116363",
                "path": "http://testserver/concepts/odms/methods/select",
                "method": "POST",
                "type": "BusinessLogicException"
            }
        }
    },
    {
        "name": "Test getting error for retrieving non existing odm method",
        "request": {
            "headers": {},
            "method": "GET",
            "request": {},
            "url": "concepts/odms/methods/OdmMethod_000002"
        },
        "response": {
            "code": 404,
            "headers": {
                "content-length": "340",
                "content-type": "application/json"
            },
            "result": {
                "message": "OdmMethodAR with uid OdmMethod_000002 does not exist or there's no version with requested status or version number.",
                "time": "2022-03-07T12:20:39.613764",
                "path": "http://testserver/concepts/odms/methods/OdmMethod_000002",
                "method": "GET",
                "type": "NotFoundException"
            }
        }
    },
    {
        "name": "Test cannot inactivate an odm method that is in Draft status",
        "request": {
            "headers": {},
            "method": "POST",
            "request": {},
            "url": "concepts/odms/methods/OdmMethod_000001/inactivate"
        },
        "response": {
            "code": 400,
            "headers": {
                "content-length": "459",
                "content-type": "application/json"
            },
            "result": {
                "message": "Cannot retire draft version.",
                "time": "2022-03-07T12:24:39.980123",
                "path": "http://testserver/concepts/odms/methods/OdmMethod_000001/inactivate",
                "method": "POST",
                "type": "BusinessLogicException"
            }
        }
    },
    {
        "name": "Test cannot reactivate an odm method that is not retired",
        "request": {
            "headers": {},
            "method": "POST",
            "request": {},
            "url": "concepts/odms/methods/OdmMethod_000001/reactivate"
        },
        "response": {
            "code": 400,
            "headers": {
                "content-length": "459",
                "content-type": "application/json"
            },
            "result": {
                "message": "Only RETIRED version can be reactivated.",
                "time": "2022-03-07T12:27:17.572613",
                "path": "http://testserver/concepts/odms/methods/OdmMethod_000001/reactivate",
                "method": "POST",
                "type": "BusinessLogicException"
            }
        }
    }
]